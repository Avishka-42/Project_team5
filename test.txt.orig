<<<<<<< HEAD
expenses-backend/
│
├── models/
│   ├── Expense.js
│   └── User.js
│
├── routes/
│   ├── auth.js
│   └── expenses.js
│
├── middleware/
│   └── auth.js
│
├── server.js
├── .env
├── package.json
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
  },
  password: {
    type: String,
    required: true,
    minlength: 6,
  },
}, { timestamps: true });
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});
userSchema.methods.comparePassword = async function (password) {
  return await bcrypt.compare(password, this.password);
};
module.exports = mongoose.model('User', userSchema);
module.exports = function (req, res, next) {
  const { category, amount, date } = req.body;
  if (!category || typeof category !== 'string') {
    return res.status(400).json({ msg: 'Category is required and must be a string.' });
  }
  if (typeof amount !== 'number' || amount < 0) {
    return res.status(400).json({ msg: 'Amount must be a positive number.' });
  }
  if (date && isNaN(Date.parse(date))) {
    return res.status(400).json({ msg: 'Invalid date format.' });
  }
  next();
};

onst mongoose = require('mongoose');
const notificationSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  message: {
    type: String,
    required: true
  },
  read: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});
module.exports = mongoose.model('Notification', notificationSchema);
const mongoose = require('mongoose');
const expenseSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  category: {
    type: String,
    required: true,
  },
  amount: {
    type: Number,
    required: true,
    min: 0,
  },
  description: String,
  date: {
    type: Date,
    default: Date.now,
  },
}, { timestamps: true });
module.exports = mongoose.model('Expense', expenseSchema);
router.get('/summary/monthly', auth, async (req, res) => {
  try {
    const summary = await Expense.aggregate([
      { $match: { user: req.user._id } },
      {
        $group: {
          _id: { $month: "$date" },
          total: { $sum: "$amount" },
        }
      },
      { $sort: { "_id": 1 } }
    ]);
    res.json(summary);
  } catch (err) {
    res.status(500).json({ msg: 'Failed to get summary' });
  }
});
const Notification = require('../models/Notification');
if (amount > 5000) {
  const note = new Notification({
    user: req.user._id,
    message: High expense alert: You spent ₹${amount} on ${category}
  });
  await note.save();
}
const jwt = require('jsonwebtoken');
const User = require('../models/User');
module.exports = async function (req, res, next) {
  const token = req.header('Authorization')?.split(' ')[1];
  if (!token) return res.status(401).json({ msg: 'No token. Access denied.' });
try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch (err) {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};
router.get('/categories', auth, (req, res) => {
  const categories = ['Food', 'Transport', 'Shopping', 'Bills', 'Health', 'Education', 'Entertainment', 'Others'];
  res.json(categories);
});
router.get('/notifications', auth, async (req, res) => {
  try {
    const notes = await Notification.find({ user: req.user._id }).sort({ createdAt: -1 });
    res.json(notes);
  } catch (err) {
    res.status(500).json({ msg: 'Failed to fetch notifications' });
  }
});
const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const User = require('../models/User');
router.post('/register', async (req, res) => {
  const { name, email, password } = req.body;
  try {
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ msg: 'User already exists' });
user = new User({ name, email, password });
    await user.save();
const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });
=======
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ msg: 'Invalid credentials' });
const isMatch = await user.comparePassword(password);
    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });
 const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });
>>>>>>> test4
    res.json({ token });
  } catch (err) {
    res.status(500).json({ msg: 'Server error' });
  }
<<<<<<< HEAD
=======
});
module.exports = router;
console.log(Authenticated user: ${req.user.email} - ${new Date().toISOString()});
router.put('/notifications/:id/read', auth, async (req, res) => {
  try {
    const note = await Notification.findOneAndUpdate(
      { _id: req.params.id, user: req.user._id },
      { read: true },
      { new: true }
    );
    if (!note) return res.status(404).json({ msg: 'Notification not found' });
    res.json(note);
  } catch (err) {
    res.status(500).json({ msg: 'Failed to update notification' });
  }
});
const express = require('express');
const router = express.Router();
const Expense = require('../models/Expense');
const auth = require('../middleware/auth');
router.post('/', auth, async (req, res) => {
  const { category, amount, description, date } = req.body;
  try {
    const expense = new Expense({
      user: req.user._id,
      category,
      amount,
      description,
      date,
    });
    await expense.save();
    res.json(expense);
  } catch (err) {
    res.status(500).json({ msg: 'Failed to add expense' });
  }
});
router.get('/', auth, async (req, res) => {
  try {
    const expenses = await Expense.find({ user: req.user._id }).sort({ date: -1 });
    res.json(expenses);
  } catch (err) {
    res.status(500).json({ msg: 'Failed to fetch expenses' });
  }
});
router.put('/:id', auth, async (req, res) => {
  try {
    const expense = await Expense.findOneAndUpdate(
      { _id: req.params.id, user: req.user._id },
      req.body,
      { new: true }
    );
    if (!expense) return res.status(404).json({ msg: 'Expense not found' });
    res.json(expense);
  } catch (err) {
    res.status(500).json({ msg: 'Update failed' });
  }
});
router.delete('/:id', auth, async (req, res) => {
  try {
    const result = await Expense.findOneAndDelete({ _id: req.params.id, user: req.user._id });
    if (!result) return res.status(404).json({ msg: 'Expense not found' });
    res.json({ msg: 'Deleted successfully' });
  } catch (err) {
    res.status(500).json({ msg: 'Delete failed' });
  }
});
module.exports = router;
console.log(User ${req.user.email} created/updated/deleted an expense on ${new Date().toISOString()});
router.get('/', auth, async (req, res) => {
  const { page = 1, limit = 10 } = req.query;
  try {
    const expenses = await Expense.find({ user: req.user._id })
      .sort({ date: -1 })
      .skip((page - 1) * limit)
      .limit(parseInt(limit));
    const total = await Expense.countDocuments({ user: req.user._id });
    res.json({ expenses, totalPages: Math.ceil(total / limit), currentPage: +page });
  } catch (err) {
    res.status(500).json({ msg: 'Failed to fetch expenses' });
  }
});
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());
app.use('/api/auth', require('./routes/auth'));
app.use('/api/expenses', require('./routes/expenses'));
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'))
  .catch((err) => console.error(err));
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(Server running on port ${PORT}));
const validateExpense = require('../middleware/validateExpense');
router.post('/', auth, validateExpense, async (req, res) => {
MONGO_URI=your_mongodb_uri
JWT_SECRET=your_secret_key
currency: {
  type: String,
  default: 'INR'
},
paymentMethod: {
  type: String,
  enum: ['Cash', 'Card', 'UPI', 'Other'],
  default: 'Cash'
}
router.get('/:id', auth, async (req, res) => {
  try {
    const expense = await Expense.findOne({ _id: req.params.id, user: req.user._id });
    if (!expense) return res.status(404).json({ msg: 'Expense not found' });
    res.json(expense);
  } catch (err) {
    res.status(500).json({ msg: 'Failed to fetch expense' });
  }
>>>>>>> test4
}); 

